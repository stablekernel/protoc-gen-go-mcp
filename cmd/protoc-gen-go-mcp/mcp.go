package main

import (
	"fmt"
	"regexp"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// FileDescriptorProto.package field number
const fileDescriptorProtoPackageFieldNumber = 2

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

const grpcPackage = protogen.GoImportPath("google.golang.org/grpc")
const contextPackage = protogen.GoImportPath("context")
const mcpPackage = protogen.GoImportPath("github.com/mark3labs/mcp-go/mcp")
const mcpServerPackage = protogen.GoImportPath("github.com/mark3labs/mcp-go/server")
const jsonPackage = protogen.GoImportPath("encoding/json")

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_mcp.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// Attach all comments associated with the syntax field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.P("// Code generated by protoc-gen-go-mcp. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-mcp v", version)
	g.P("// - protoc             ", protocVersion(gen))
	//if file.Proto.GetOptions().GetDeprecated() {
	//	g.P("// ", file.Desc.Path(), " is a deprecated file.")
	//} else {
	//	g.P("// source: ", file.Desc.Path())
	//}
	g.P()
	//// Attach all comments associated with the package field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genMCPService(gen, file, g, service)
	}
}

func genMCPService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	mcpServerName := service.GoName + "MCPServer"
	clientName := service.GoName + "Client"
	generateMcpServerStruct(g, mcpServerName, clientName)
	generateMcpServerService(g, service, mcpServerName, clientName)
	generateMcpServerHandlers(g, service, mcpServerName, clientName)
}

func generateMcpServerService(g *protogen.GeneratedFile, service *protogen.Service, mcpServerName string, clientName string) {
	constructorName := "New" + service.GoName + "MCPServer"
	serverStructName := unexport(mcpServerName)

	g.P("func ", constructorName, "(")
	g.P("client ", clientName, ",")
	g.P("mcpServer *", mcpServerPackage.Ident("MCPServer"), ",")
	g.P(") *", serverStructName, " {")
	g.P("return &", serverStructName, "{")
	g.P("", clientName, ": client,")
	g.P("MCPServer: mcpServer,")
	g.P("}")
	g.P("}")
	g.P()
}

func generateMcpServerHandlers(g *protogen.GeneratedFile, service *protogen.Service, mcpServerName string, clientName string) {
	methods := make([]*protogen.Method, 0)
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			// Skip streaming methods
			// TODO: Evaluate support of streaming methods
		} else {
			methods = append(methods, method)
			generateHandler(g, method, mcpServerName, clientName)
			g.P()
			generateMCPTool(g, method, mcpServerName)
			g.P()
		}
	}
	g.P()
	generateDefaultToolsRegistration(g, methods, mcpServerName)
}

func generateMCPTool(g *protogen.GeneratedFile, method *protogen.Method, mcpServerName string) {
	g.P("func (s *", unexport(mcpServerName), ") ", method.GoName, "Tool() (", mcpPackage.Ident("Tool"), ") {")

	methodDescription := ""
	if len(method.Comments.Leading) > 0 {
		methodDescription = processCommentToString(method.Comments.Leading)
	} else {
		methodDescription = camelToSpace(method.GoName)
	}
	g.P("tool := mcp.NewTool(")
	g.P("\"", method.GoName, "\", mcp.WithDescription(\"", methodDescription, "\"),")
	if method.Input != nil {
		if len(method.Input.Fields) > 0 {
			generateMCPToolField(g, method.Input)
		}
	}
	g.P(")")
	g.P("return tool")
	g.P("}")
}

func generateMCPToolField(g *protogen.GeneratedFile, input *protogen.Message) {
	g.P("mcp.WithObject(")
	g.P("\"", input.Desc.Name(), "\",")
	g.P("mcp.Description(\"", processCommentToString(input.Comments.Leading), "\"),")
	g.P("mcp.Properties(map[string]any{")
	for _, messageField := range input.Fields {
		generateMCPPropertyForField(g, messageField)
	}
	g.P("}),")
	g.P("),")
}

func generateMCPPropertyForField(g *protogen.GeneratedFile, field *protogen.Field) {
	g.P("\"", field.Desc.Name(), "\": map[string]any{")
	typeName := field.Desc.Kind().String()
	switch field.Desc.Kind().String() {
	case "double", "float", "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64":
		typeName = "number"
	case "bool":
		typeName = "boolean"
	case "bytes":
		typeName = "string"
	}
	if field.Desc.IsList() {
		typeName = "array"
	}
	g.P("\"type\": \"", typeName, "\",")
	description := ""
	if field.Comments.Leading != "" {
		description = processCommentToString(field.Comments.Leading)
	} else {
		description = camelToSpace(field.GoName)
	}
	g.P("\"description\": \"", description, "\",")
	if field.Desc.HasOptionalKeyword() {
		g.P("\"required\": false,")
	} else {
		g.P("\"required\": true,")
	}
	if field.Desc.Kind().String() == "bytes" {
		g.P("\"format\": \"byte\",")
	}
	g.P("},")
}

func generateHandler(g *protogen.GeneratedFile, method *protogen.Method, mcpServerName string, clientName string) {
	g.QualifiedGoIdent(jsonPackage.Ident("Marshal"))

	g.P("func (s *", unexport(mcpServerName), ") ", method.GoName, "Handler(ctx ", contextPackage.Ident("Context"), ", req ", mcpPackage.Ident("CallToolRequest"), ") (", QualifiedGoIdentPointer(g, mcpPackage.Ident("CallToolResult")), ", error) {")

	// Create request message
	g.P("// Create request message from parameters")
	g.P("protoReq := &", g.QualifiedGoIdent(method.Input.GoIdent), "{}")

	// Process each field in the input message
	for _, field := range method.Input.Fields {
		// Get parameter from request parameters
		fieldName := string(field.Desc.Name())
		g.P("// Extract ", fieldName)

		switch field.Desc.Kind().String() {
		case "string":
			if field.Desc.IsList() {

			} else {
				g.P("if val, ok := req.Params.Arguments[\"", fieldName, "\"]; ok {")
				g.P("if strVal, ok := val.(string); ok {")
				g.P("protoReq.", field.GoName, " = strVal")
				g.P("}")
				g.P("}")
			}
		case "message":
			if field.Desc.IsList() {

			} else {
				g.P("if val, ok := req.Params.Arguments[\"", fieldName, "\"]; ok {")
				g.P("if objVal, ok := val.(map[string]any); ok {")
				g.P("msgVal := &", g.QualifiedGoIdent(field.Message.GoIdent), "{}")

				// Process nested message fields
				for _, msgField := range field.Message.Fields {
					generateFieldAssignment(g, msgField, "msgVal", "fieldVal")
				}

				g.P("protoReq.", field.GoName, " = msgVal")
				g.P("}")
				g.P("}")
			}
		// Add cases for other types (int32, int64, bool, etc.)
		case "int32", "int64":
			if field.Desc.IsList() {

			} else {
				g.P("if val, ok := req.Params.Arguments[\"", fieldName, "\"]; ok {")
				g.P("if numVal, ok := val.(float64); ok {") // JSON numbers come as float64
				if field.Desc.Kind().String() == "int32" {
					g.P("protoReq.", field.GoName, " = int32(numVal)")
				} else {
					g.P("protoReq.", field.GoName, " = int64(numVal)")
				}
				g.P("}")
				g.P("}")
			}
		case "bool":
			if field.Desc.IsList() {

			} else {
				g.P("if val, ok := req.Params.Arguments[\"", fieldName, "\"]; ok {")
				g.P("if boolVal, ok := val.(bool); ok {")
				g.P("protoReq.", field.GoName, " = boolVal")
				g.P("}")
				g.P("}")
			}
		}
	}

	// Call the client method
	g.P("// Call the client method")
	g.P("resp, err := s.", clientName, ".", method.GoName, "(ctx, protoReq)")
	g.P("if err != nil {")
	g.P("// Return error as a CallToolResult with IsError=true")
	g.P("return &", mcpPackage.Ident("CallToolResult"), "{")
	g.P("Content: []", mcpPackage.Ident("Content"), "{")
	g.P("&", mcpPackage.Ident("TextContent"), "{")
	g.P("Text: err.Error(),")
	g.P("},")
	g.P("},")
	g.P("IsError: true,")
	g.P("}, nil")
	g.P("}")

	// Create and return successful result
	g.P("// Create successful result")
	g.P("// Convert response to JSON")
	g.P("respContent := make(map[string]any)")

	// Add response fields
	if len(method.Output.Fields) > 0 {
		for _, field := range method.Output.Fields {
			fieldName := string(field.Desc.Name())
			g.P("respContent[\"", fieldName, "\"] = resp.", field.GoName)
		}
	}

	g.P("// Create and return the CallToolResult")
	g.P("jsonContent, err := json.Marshal(respContent)")
	g.P("if err != nil {")
	g.P("return mcp.NewToolResultErrorFromErr(\"error marshaling\", err), nil")
	g.P("}")
	g.P("return &", mcpPackage.Ident("CallToolResult"), "{")
	g.P("Content: []", mcpPackage.Ident("Content"), "{")
	g.P("&", mcpPackage.Ident("TextContent"), "{")
	g.P("Text:        string(jsonContent),")
	g.P("Type: \"text\",")
	g.P("},")
	g.P("},")
	g.P("IsError: false,")
	g.P("}, nil")
	g.P("}")
}

func generateFieldAssignment(g *protogen.GeneratedFile, field *protogen.Field, varName string, valName string) {
	isOptional := field.Desc.HasOptionalKeyword()
	isList := field.Desc.IsList()

	msgFieldName := string(field.Desc.Name())
	g.P("if fieldVal, ok := objVal[\"", msgFieldName, "\"]; ok {")
	castType := ""
	switch field.Desc.Kind().String() {
	case "string":
		if isList {
			castType = "[]string"
		} else {
			castType = "string"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "int32":
		if isList {
			castType = "[]int32"
		} else {
			castType = "int32"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "int64":
		if isList {
			castType = "[]int64"
		} else {
			castType = "int64"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "bool":
		if isList {
			castType = "[]bool"
		} else {
			castType = "bool"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "double":
		if isList {
			castType = "[]float64"
		} else {
			castType = "float64"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "float":
		if isList {
			castType = "[]float32"
		} else {
			castType = "float32"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "uint32":
		if isList {
			castType = "[]uint32"
		} else {
			castType = "uint32"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "uint64":
		if isList {
			castType = "[]uint64"
		} else {
			castType = "uint64"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "sint32":
		if isList {
			castType = "[]int32"
		} else {
			castType = "int32"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "sfixed32":
		if isList {
			castType = "[]int32"
		} else {
			castType = "int32"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "sint64":
		if isList {
			castType = "[]int64"
		} else {
			castType = "int64"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "sfixed64":
		if isList {
			castType = "[]int64"
		} else {
			castType = "int64"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "fixed32":
		if isList {
			castType = "[]uint32"
		} else {
			castType = "uint32"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "fixed64":
		if isList {
			castType = "[]uint64"
		} else {
			castType = "uint64"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "bytes":
		if isList {
			castType = "[][]byte"
		} else {
			castType = "[]byte"
		}
		generateValAssignmentWithCast(g, field, varName, valName, isOptional, castType)
	case "message":
		if isList {
			// TODO: Handle list of messages
		} else {
			g.P("if objVal, ok := ", valName, ".(map[string]any); ok {")
			g.P("msgVal := &", g.QualifiedGoIdent(field.Message.GoIdent), "{}")
			g.P("// Process nested fields")
			for _, nestedField := range field.Message.Fields {
				generateFieldAssignment(g, nestedField, "msgVal", "fieldVal")
			}
			g.P(varName, ".", field.GoName, " = msgVal")
			g.P("}")
		}
	case "enum":
		if isList {
			//TODO: Handle list of enums
		} else {
			g.P("if numVal, ok := ", valName, ".(float64); ok {")
			if isOptional {
				g.P("val := ", g.QualifiedGoIdent(field.Enum.GoIdent), "(int32(numVal))")
				g.P(varName, ".", field.GoName, " = &val")
			} else {
				g.P(varName, ".", field.GoName, " = ", g.QualifiedGoIdent(field.Enum.GoIdent), "(int32(numVal))")
			}
			g.P("} else if strVal, ok := ", valName, ".(string); ok {")
			g.P("// Try to convert string enum value if provided as string")
			if isOptional {
				g.P("val := ", g.QualifiedGoIdent(field.Enum.GoIdent), "(", g.QualifiedGoIdent(field.Enum.GoIdent), "_value[strVal])")
				g.P(varName, ".", field.GoName, " = &val")
			} else {
				g.P("val := ", g.QualifiedGoIdent(field.Enum.GoIdent), "_value[strVal]")
				g.P(varName, ".", field.GoName, " = ", g.QualifiedGoIdent(field.Enum.GoIdent), "(val)")
			}
			g.P("}")
		}
	default:
		g.P("// Unsupported type: ", field.Desc.Kind().String())
	}
	g.P("}")
}

func generateValAssignmentWithCast(g *protogen.GeneratedFile, field *protogen.Field, varName string, valName string, isOptional bool, castType string) {
	g.P("if numVal, ok := ", valName, ".(", castType, "); ok {")
	if isOptional {
		g.P(varName, ".", field.GoName, " = &numVal")
	} else {
		g.P(varName, ".", field.GoName, " = numVal")
	}
	g.P("}")
}

// TODO: this needs some love, multiline strings are handled not so well, leading trailing spaces, etc
// processCommentToString processes the comments to a single line string
func processCommentToString(comments protogen.Comments) string {
	return strings.TrimSuffix(strings.Replace(strings.TrimPrefix(string(comments), " "), "\n", " ", -1), " ")
}

func generateMcpServerStruct(g *protogen.GeneratedFile, mcpServerName string, clientName string) {
	g.P("type ", unexport(mcpServerName), " struct {")
	g.P(clientName)
	g.P()
	g.P("MCPServer ", QualifiedGoIdentPointer(g, mcpServerPackage.Ident("MCPServer")))
	g.P("}")
	g.P()
}

func generateDefaultToolsRegistration(g *protogen.GeneratedFile, methods []*protogen.Method, mcpServerName string) {
	g.P("func (s *", unexport(mcpServerName), ") RegisterDefaultTools() {")
	for _, method := range methods {
		g.P("s.MCPServer.AddTool(s.", method.GoName, "Tool(), s.", method.GoName, "Handler)")
	}
	g.P("}")
	g.P()
}

// QualifiedGoIdentPointer returns the string to use for a Go identifier as a pointer type.
//
// If the identifier is from a different Go package than the generated file,
// the returned name will be qualified (package.name) and an import statement
// for the identifier's package will be included in the file.
func QualifiedGoIdentPointer(g *protogen.GeneratedFile, ident protogen.GoIdent) string {
	return "*" + g.QualifiedGoIdent(ident)
}

func unexport(s string) string {
	return strings.ToLower(s[:1]) + s[1:]
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func genLeadingComments(g *protogen.GeneratedFile, loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.P(protogen.Comments(s))
	}
	if s := loc.LeadingComments; s != "" {
		g.P(protogen.Comments(s))
	}
}

func camelToSpace(s string) string {
	re := regexp.MustCompile(`([a-zA-Z])([0-9])|([0-9])([a-zA-Z])|([a-z])([A-Z])`)
	return re.ReplaceAllStringFunc(s, func(match string) string {
		// Handle lowercase to uppercase (e.g., myValue → my Value)
		re1 := regexp.MustCompile(`([a-z])([A-Z])`)
		match = re1.ReplaceAllString(match, `$1 $2`)

		// Handle letter to number (e.g., item123 → item 123)
		re2 := regexp.MustCompile(`([a-zA-Z])([0-9])`)
		match = re2.ReplaceAllString(match, `$1 $2`)

		// Handle number to letter (e.g., 123item → 123 item)
		re3 := regexp.MustCompile(`([0-9])([a-zA-Z])`)
		match = re3.ReplaceAllString(match, `$1 $2`)

		return match
	})
}
