// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: examples/protos/example.proto

package examplev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VibeService_SetVibe_FullMethodName        = "/examples.v1.VibeService/SetVibe"
	VibeService_GetVibe_FullMethodName        = "/examples.v1.VibeService/GetVibe"
	VibeService_SetVibeDetails_FullMethodName = "/examples.v1.VibeService/SetVibeDetails"
)

// VibeServiceClient is the client API for VibeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VibeServiceClient interface {
	// Set the Vibe
	SetVibe(ctx context.Context, in *SetVibeRequest, opts ...grpc.CallOption) (*SetVibeResponse, error)
	// Get Vibe
	// of the server
	GetVibe(ctx context.Context, in *GetVibeRequest, opts ...grpc.CallOption) (*GetVibeResponse, error)
	// Set vibe details
	SetVibeDetails(ctx context.Context, in *SetVibeDetailsRequest, opts ...grpc.CallOption) (*SetVibeResponse, error)
}

type vibeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVibeServiceClient(cc grpc.ClientConnInterface) VibeServiceClient {
	return &vibeServiceClient{cc}
}

func (c *vibeServiceClient) SetVibe(ctx context.Context, in *SetVibeRequest, opts ...grpc.CallOption) (*SetVibeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVibeResponse)
	err := c.cc.Invoke(ctx, VibeService_SetVibe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vibeServiceClient) GetVibe(ctx context.Context, in *GetVibeRequest, opts ...grpc.CallOption) (*GetVibeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVibeResponse)
	err := c.cc.Invoke(ctx, VibeService_GetVibe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vibeServiceClient) SetVibeDetails(ctx context.Context, in *SetVibeDetailsRequest, opts ...grpc.CallOption) (*SetVibeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVibeResponse)
	err := c.cc.Invoke(ctx, VibeService_SetVibeDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VibeServiceServer is the server API for VibeService service.
// All implementations must embed UnimplementedVibeServiceServer
// for forward compatibility.
type VibeServiceServer interface {
	// Set the Vibe
	SetVibe(context.Context, *SetVibeRequest) (*SetVibeResponse, error)
	// Get Vibe
	// of the server
	GetVibe(context.Context, *GetVibeRequest) (*GetVibeResponse, error)
	// Set vibe details
	SetVibeDetails(context.Context, *SetVibeDetailsRequest) (*SetVibeResponse, error)
	mustEmbedUnimplementedVibeServiceServer()
}

// UnimplementedVibeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVibeServiceServer struct{}

func (UnimplementedVibeServiceServer) SetVibe(context.Context, *SetVibeRequest) (*SetVibeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVibe not implemented")
}
func (UnimplementedVibeServiceServer) GetVibe(context.Context, *GetVibeRequest) (*GetVibeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVibe not implemented")
}
func (UnimplementedVibeServiceServer) SetVibeDetails(context.Context, *SetVibeDetailsRequest) (*SetVibeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVibeDetails not implemented")
}
func (UnimplementedVibeServiceServer) mustEmbedUnimplementedVibeServiceServer() {}
func (UnimplementedVibeServiceServer) testEmbeddedByValue()                     {}

// UnsafeVibeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VibeServiceServer will
// result in compilation errors.
type UnsafeVibeServiceServer interface {
	mustEmbedUnimplementedVibeServiceServer()
}

func RegisterVibeServiceServer(s grpc.ServiceRegistrar, srv VibeServiceServer) {
	// If the following call pancis, it indicates UnimplementedVibeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VibeService_ServiceDesc, srv)
}

func _VibeService_SetVibe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVibeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VibeServiceServer).SetVibe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VibeService_SetVibe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VibeServiceServer).SetVibe(ctx, req.(*SetVibeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VibeService_GetVibe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVibeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VibeServiceServer).GetVibe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VibeService_GetVibe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VibeServiceServer).GetVibe(ctx, req.(*GetVibeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VibeService_SetVibeDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVibeDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VibeServiceServer).SetVibeDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VibeService_SetVibeDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VibeServiceServer).SetVibeDetails(ctx, req.(*SetVibeDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VibeService_ServiceDesc is the grpc.ServiceDesc for VibeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VibeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "examples.v1.VibeService",
	HandlerType: (*VibeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVibe",
			Handler:    _VibeService_SetVibe_Handler,
		},
		{
			MethodName: "GetVibe",
			Handler:    _VibeService_GetVibe_Handler,
		},
		{
			MethodName: "SetVibeDetails",
			Handler:    _VibeService_SetVibeDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "examples/protos/example.proto",
}
