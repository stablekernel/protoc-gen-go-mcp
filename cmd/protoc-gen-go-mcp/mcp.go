package main

import (
	"fmt"
	"log"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

// FileDescriptorProto.package field number
const fileDescriptorProtoPackageFieldNumber = 2

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

const grpcPackage = protogen.GoImportPath("google.golang.org/grpc")
const contextPackage = protogen.GoImportPath("context")
const mcpPackage = protogen.GoImportPath("github.com/mark3labs/mcp-go/mcp")
const mcpServerPackage = protogen.GoImportPath("github.com/mark3labs/mcp-go/server")

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_mcp.pb.go"
	log.Println(filename)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// Attach all comments associated with the syntax field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.P("// Code generated by protoc-gen-go-mcp. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-mcp v", version)
	g.P("// - protoc             ", protocVersion(gen))
	//if file.Proto.GetOptions().GetDeprecated() {
	//	g.P("// ", file.Desc.Path(), " is a deprecated file.")
	//} else {
	//	g.P("// source: ", file.Desc.Path())
	//}
	g.P()
	//// Attach all comments associated with the package field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}
	for _, service := range file.Services {
		genMCPService(gen, file, g, service)
	}
}

func genMCPService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	mcpServerName := service.GoName + "MCPServer"
	clientName := service.GoName + "Client"
	generateMcpServerStruct(g, mcpServerName, clientName)
	generateMcpServerHandlers(g, service, mcpServerName, clientName)
}

func generateMcpServerHandlers(g *protogen.GeneratedFile, service *protogen.Service, mcpServerName string, clientName string) {
	methods := make([]*protogen.Method, 0)
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			// Skip streaming methods
			// TODO: Evaluate support of streaming methods
		} else {
			methods = append(methods, method)
			generateHandler(g, method, mcpServerName, clientName)
			g.P()
			generateMCPTool(g, method, mcpServerName)
			g.P()
		}
	}
	g.P()
	generateDefaultToolsRegistration(g, methods, mcpServerName)
}

/*
	func (s *vibeServiceMCPServer) SetVibeTool() mcp.Tool {
		tool := mcp.NewTool(
			"SetVibe", mcp.WithDescription("Set the Vibe"),
			mcp.WithString(
				"vibe",
				mcp.Required(),
				mcp.Description("The vibe to set on the server"),
			),
		)
		return tool
	}
*/
func generateMCPTool(g *protogen.GeneratedFile, method *protogen.Method, mcpServerName string) {
	g.P("func (s *", unexport(mcpServerName), ") ", method.GoName, "Tool() (", mcpPackage.Ident("Tool"), ") {")

	methodDescription := ""
	if len(method.Comments.Leading) > 0 {
		methodDescription = processCommentToString(method.Comments.Leading)
	} else {
		//TODO: Determine how we should handle this from an API perspective -- we need a comment here to ensure that there is natural language to key in on for what the API does
	}
	g.P("tool := mcp.NewTool(")
	g.P("\"", method.GoName, "\", mcp.WithDescription(\"", methodDescription, "\"),")
	log.Println(method.Input)
	for _, field := range method.Input.Fields {
		log.Println(field)
		generateMCPToolField(g, field)
	}
	g.P(")")
	g.P("return tool")
	g.P("}")
}

/*
mcp.WithString(

	"vibe",
	mcp.Required(),
	mcp.Description("The vibe to set on the server"),

),
*/
func generateMCPToolField(g *protogen.GeneratedFile, field *protogen.Field) {
	switch field.Desc.Kind().String() {
	case "string":
		g.P("mcp.WithString(")
		g.P("\"", field.Desc.Name(), "\",")
		if field.Desc.HasOptionalKeyword() {
		} else {
			g.P("mcp.Required(),")
		}
		g.P("mcp.Description(\"", processCommentToString(field.Comments.Leading), "\"),")
		g.P("),")
	}
}

func generateHandler(g *protogen.GeneratedFile, method *protogen.Method, mcpServerName string, clientName string) {
	g.P("func (s *", unexport(mcpServerName), ") ", method.GoName, "Handler(ctx ", contextPackage.Ident("Context"), ", req ", mcpPackage.Ident("CallToolRequest"), ") (", QualifiedGoIdentPointer(g, mcpPackage.Ident("CallToolResult")), ", error) {")
	g.P("// TODO: Implement the handler for ", method.GoName)
	g.P("return nil, nil")
	g.P("}")
}

// TODO: this needs some love, multiline strings are handled not so well, leading trailing spaces, etc
// processCommentToString processes the comments to a single line string
func processCommentToString(comments protogen.Comments) string {
	return strings.TrimSuffix(strings.Replace(strings.TrimPrefix(string(comments), " "), "\n", " ", -1), " ")
}

func generateMcpServerStruct(g *protogen.GeneratedFile, mcpServerName string, clientName string) {
	g.P("type ", unexport(mcpServerName), " struct {")
	g.P(clientName)
	g.P()
	g.P("MCPServer ", QualifiedGoIdentPointer(g, mcpServerPackage.Ident("MCPServer")))
	g.P("}")
	g.P()
}

/*
	func (s *vibeServiceMCPServer) RegisterDefaultTools() {
		s.MCPServer.AddTool(s.SetVibeTool(), s.SetVibeHandler)
		s.MCPServer.AddTool(s.GetVibeTool(), s.GetVibeHandler)
	}
*/
func generateDefaultToolsRegistration(g *protogen.GeneratedFile, methods []*protogen.Method, mcpServerName string) {
	g.P("func (s *", unexport(mcpServerName), ") RegisterDefaultTools() {")
	for _, method := range methods {
		g.P("s.MCPServer.AddTool(s.", method.GoName, "Tool(), s.", method.GoName, "Handler)")
	}
	g.P("}")
	g.P()
}

// QualifiedGoIdentPointer returns the string to use for a Go identifier as a pointer type.
//
// If the identifier is from a different Go package than the generated file,
// the returned name will be qualified (package.name) and an import statement
// for the identifier's package will be included in the file.
func QualifiedGoIdentPointer(g *protogen.GeneratedFile, ident protogen.GoIdent) string {
	return "*" + g.QualifiedGoIdent(ident)
}

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func genLeadingComments(g *protogen.GeneratedFile, loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.P(protogen.Comments(s))
	}
	if s := loc.LeadingComments; s != "" {
		g.P(protogen.Comments(s))
	}
}
