// Code generated by protoc-gen-go-mcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-mcp v0.0.1
// - protoc             v5.29.3

package examplev1

import (
	context "context"
	mcp "github.com/mark3labs/mcp-go/mcp"
	server "github.com/mark3labs/mcp-go/server"
)

type vibeServiceMCPServer struct {
	VibeServiceClient

	MCPServer *server.MCPServer
}

func NewVibeServiceMCPServer(
	client VibeServiceClient,
	mcpServer *server.MCPServer,
) *vibeServiceMCPServer {
	return &vibeServiceMCPServer{
		VibeServiceClient: client,
		MCPServer:         mcpServer,
	}
}

func (s *vibeServiceMCPServer) SetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// TODO: Implement the handler for SetVibe
	return nil, nil
}

func (s *vibeServiceMCPServer) SetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibe", mcp.WithDescription("Set the Vibe"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the server to be set"),
		),
	)
	return tool
}

func (s *vibeServiceMCPServer) GetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// TODO: Implement the handler for GetVibe
	return nil, nil
}

func (s *vibeServiceMCPServer) GetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"GetVibe", mcp.WithDescription("Get Vibe  of the server "),
	)
	return tool
}

func (s *vibeServiceMCPServer) SetVibeDetailsHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// TODO: Implement the handler for SetVibeDetails
	return nil, nil
}

func (s *vibeServiceMCPServer) SetVibeDetailsTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibeDetails", mcp.WithDescription("Set vibe details"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the string to be set"),
		),
		mcp.WithObject(
			"vibe_scalar",
			mcp.Required(),
			mcp.Description("The details of the vibe"),
			mcp.Properties(map[string]interface{}{
				"vibe_double": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe double",
					"required":    true,
				},
				"vibe_float": map[string]interface{}{
					"type":        "number",
					"description": "the details of the vibe float",
					"required":    true,
				},
				"vibe_int32": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe int32",
					"required":    true,
				},
				"vibe_int64": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe int64",
					"required":    true,
				},
				"vibe_uint32": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe uint32",
					"required":    false,
				},
				"vibe_uint64": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe uint64",
					"required":    true,
				},
				"vibe_sint32": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe sint32",
					"required":    true,
				},
				"vibe_sint64": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe sint64",
					"required":    true,
				},
				"vibe_fixed32": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe fixed32",
					"required":    true,
				},
				"vibe_fixed64": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe fixed64",
					"required":    true,
				},
				"vibe_sfixed32": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe sfixed32",
					"required":    true,
				},
				"vibe_sfixed64": map[string]interface{}{
					"type":        "number",
					"description": "The details of the vibe sfixed64",
					"required":    true,
				},
				"vibe_bool": map[string]interface{}{
					"type":        "boolean",
					"description": "The details of the vibe bool",
					"required":    true,
				},
				"vibe_bytes": map[string]interface{}{
					"type":        "string",
					"description": "the details of the vibe bytes",
					"required":    true,
				},
			}),
		),
	)
	return tool
}

func (s *vibeServiceMCPServer) RegisterDefaultTools() {
	s.MCPServer.AddTool(s.SetVibeTool(), s.SetVibeHandler)
	s.MCPServer.AddTool(s.GetVibeTool(), s.GetVibeHandler)
	s.MCPServer.AddTool(s.SetVibeDetailsTool(), s.SetVibeDetailsHandler)
}
