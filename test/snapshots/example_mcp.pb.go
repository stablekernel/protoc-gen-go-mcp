// Code generated by protoc-gen-go-mcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-mcp v0.0.1
// - protoc             v5.29.3

package examplev1

import (
	context "context"
	"encoding/json"
	examplev1 "protoc-gen-go-mcp/examples/gen/example/v1"

	mcp "github.com/mark3labs/mcp-go/mcp"
	server "github.com/mark3labs/mcp-go/server"
)

type vibeServiceMCPServer struct {
	examplev1.VibeServiceClient

	MCPServer *server.MCPServer
}

func NewVibeServiceMCPServer(
	client examplev1.VibeServiceClient,
	mcpServer *server.MCPServer,
) *vibeServiceMCPServer {
	return &vibeServiceMCPServer{
		VibeServiceClient: client,
		MCPServer:         mcpServer,
	}
}

func (s *vibeServiceMCPServer) SetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	result, err := s.SetVibe(ctx, &examplev1.SetVibeRequest{
		Vibe: req.Params.Arguments["vibe"].(string),
	})
	if err != nil {
		return mcp.NewToolResultErrorFromErr("error calling SetVibe", err), nil
	}

	resultJson, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultErrorFromErr("error marshalling SetVibeResponse", err), nil
	}

	return mcp.NewToolResultResource(
		"the new vibe of the server",
		mcp.TextResourceContents{
			URI: "examples.v1://SetVibeResponse",
			MIMEType: "application/json",
			Text: string(resultJson),
		},
	), nil
}

func (s *vibeServiceMCPServer) SetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibe", mcp.WithDescription("Set the Vibe"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the server to be set"),
		),
	)
	return tool
}


func (s *vibeServiceMCPServer) GetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	result, err := s.GetVibe(ctx, &examplev1.GetVibeRequest{})
	if err != nil {
		return mcp.NewToolResultErrorFromErr("error calling GetVibe", err), nil
	}

	resultJson, err := json.Marshal(result)
	if err != nil {
		return mcp.NewToolResultErrorFromErr("error marshalling GetVibeResponse", err), nil
	}

	return mcp.NewToolResultResource(
		"What the server is currently vibing",
		mcp.TextResourceContents{
			URI: "examples.v1://GetVibeResponse",
			MIMEType: "application/json",
			Text: string(resultJson),
		},
	), nil
}

func (s *vibeServiceMCPServer) GetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"GetVibe", mcp.WithDescription("Get Vibe  of the server "),
	)
	return tool
}

func (s *vibeServiceMCPServer) RegisterDefaultTools() {
	s.MCPServer.AddTool(s.SetVibeTool(), s.SetVibeHandler)
	s.MCPServer.AddTool(s.GetVibeTool(), s.GetVibeHandler)
}
