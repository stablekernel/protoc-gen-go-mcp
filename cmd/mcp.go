package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"log"
)

// FileDescriptorProto.syntax field number
const fileDescriptorProtoSyntaxFieldNumber = 12

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_mcp.pb.go"
	log.Println(filename)
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	// Attach all comments associated with the syntax field.
	genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoSyntaxFieldNumber}))
	g.P("// Code generated by protoc-gen-go-mcp. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-mcp v", version)
	g.P("// - protoc             ", protocVersion(gen))
	//if file.Proto.GetOptions().GetDeprecated() {
	//	g.P("// ", file.Desc.Path(), " is a deprecated file.")
	//} else {
	//	g.P("// source: ", file.Desc.Path())
	//}
	//g.P()
	//// Attach all comments associated with the package field.
	//genLeadingComments(g, file.Desc.SourceLocations().ByPath(protoreflect.SourcePath{fileDescriptorProtoPackageFieldNumber}))
	//g.P("package ", file.GoPackageName)
	//g.P()
	//generateFileContent(gen, file, g)
	return nil
}

func genLeadingComments(g *protogen.GeneratedFile, loc protoreflect.SourceLocation) {
	for _, s := range loc.LeadingDetachedComments {
		g.P(protogen.Comments(s))
		g.P()
	}
	if s := loc.LeadingComments; s != "" {
		g.P(protogen.Comments(s))
		g.P()
	}
}
