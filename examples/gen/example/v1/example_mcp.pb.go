// Code generated by protoc-gen-go-mcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-mcp v0.0.1
// - protoc             v5.29.3

package examplev1

import (
	context "context"
	mcp "github.com/mark3labs/mcp-go/mcp"
	server "github.com/mark3labs/mcp-go/server"
)

type vibeServiceMCPServer struct {
	VibeServiceClient

	MCPServer *server.MCPServer
}

func (s *vibeServiceMCPServer) SetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// TODO: Implement the handler for SetVibe
	return nil, nil
}

func (s *vibeServiceMCPServer) SetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibe", mcp.WithDescription("Set the Vibe"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the server to be set"),
		),
	)
	return tool
}

func (s *vibeServiceMCPServer) GetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// TODO: Implement the handler for GetVibe
	return nil, nil
}

func (s *vibeServiceMCPServer) GetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"GetVibe", mcp.WithDescription("Get Vibe  of the server "),
	)
	return tool
}

func (s *vibeServiceMCPServer) SetVibeDetailsHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// TODO: Implement the handler for SetVibeDetails
	return nil, nil
}

func (s *vibeServiceMCPServer) SetVibeDetailsTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibeDetails", mcp.WithDescription("Set vibe details"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the string to be set"),
		),
	)
	return tool
}

func (s *vibeServiceMCPServer) RegisterDefaultTools() {
	s.MCPServer.AddTool(s.SetVibeTool(), s.SetVibeHandler)
	s.MCPServer.AddTool(s.GetVibeTool(), s.GetVibeHandler)
	s.MCPServer.AddTool(s.SetVibeDetailsTool(), s.SetVibeDetailsHandler)
}
