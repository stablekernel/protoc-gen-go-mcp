// Code generated by protoc-gen-go-mcp. DO NOT EDIT.
// versions:
// - protoc-gen-go-mcp v0.0.1
// - protoc             v6.30.2

package examplev1

import (
	context "context"
	json "encoding/json"
	mcp "github.com/mark3labs/mcp-go/mcp"
	server "github.com/mark3labs/mcp-go/server"
)

type vibeServiceMCPServer struct {
	VibeServiceClient

	MCPServer *server.MCPServer
}

func NewVibeServiceMCPServer(
	client VibeServiceClient,
	mcpServer *server.MCPServer,
) *vibeServiceMCPServer {
	return &vibeServiceMCPServer{
		VibeServiceClient: client,
		MCPServer:         mcpServer,
	}
}

func (s *vibeServiceMCPServer) SetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Create request message from parameters
	protoReq := &SetVibeRequest{}
	// Extract vibe
	if val, ok := req.Params.Arguments["vibe"]; ok {
		if strVal, ok := val.(string); ok {
			protoReq.Vibe = strVal
		}
	}
	// Call the client method
	resp, err := s.VibeServiceClient.SetVibe(ctx, protoReq)
	if err != nil {
		// Return error as a CallToolResult with IsError=true
		return &mcp.CallToolResult{
			Content: []mcp.Content{
				&mcp.TextContent{
					Text: err.Error(),
				},
			},
			IsError: true,
		}, nil
	}
	// Create successful result
	// Convert response to JSON
	respContent := make(map[string]any)
	respContent["previous_vibe"] = resp.PreviousVibe
	respContent["vibe"] = resp.Vibe
	// Create and return the CallToolResult
	jsonContent, err := json.Marshal(respContent)
	if err != nil {
		return nil, err
	}
	return &mcp.CallToolResult{
		Content: []mcp.Content{
			&mcp.TextContent{
				Text: string(jsonContent),
				Type: "application/json",
			},
		},
		IsError: false,
	}, nil
}

func (s *vibeServiceMCPServer) SetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibe", mcp.WithDescription("Set the Vibe"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the server to be set"),
		),
	)
	return tool
}

func (s *vibeServiceMCPServer) GetVibeHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Create request message from parameters
	protoReq := &GetVibeRequest{}
	// Call the client method
	resp, err := s.VibeServiceClient.GetVibe(ctx, protoReq)
	if err != nil {
		// Return error as a CallToolResult with IsError=true
		return &mcp.CallToolResult{
			Content: []mcp.Content{
				&mcp.TextContent{
					Text: err.Error(),
				},
			},
			IsError: true,
		}, nil
	}
	// Create successful result
	// Convert response to JSON
	respContent := make(map[string]any)
	respContent["vibe"] = resp.Vibe
	// Create and return the CallToolResult
	jsonContent, err := json.Marshal(respContent)
	if err != nil {
		return nil, err
	}
	return &mcp.CallToolResult{
		Content: []mcp.Content{
			&mcp.TextContent{
				Text: string(jsonContent),
				Type: "application/json",
			},
		},
		IsError: false,
	}, nil
}

func (s *vibeServiceMCPServer) GetVibeTool() mcp.Tool {
	tool := mcp.NewTool(
		"GetVibe", mcp.WithDescription("Get Vibe  of the server "),
	)
	return tool
}

func (s *vibeServiceMCPServer) SetVibeDetailsHandler(ctx context.Context, req mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	// Create request message from parameters
	protoReq := &SetVibeDetailsRequest{}
	// Extract vibe
	if val, ok := req.Params.Arguments["vibe"]; ok {
		if strVal, ok := val.(string); ok {
			protoReq.Vibe = strVal
		}
	}
	// Extract vibe_scalar
	if val, ok := req.Params.Arguments["vibe_scalar"]; ok {
		if objVal, ok := val.(map[string]any); ok {
			msgVal := &VibeScalar{}
			if fieldVal, ok := objVal["vibe_double"]; ok {
				if numVal, ok := fieldVal.(float64); ok {
					msgVal.VibeDouble = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_float"]; ok {
				if numVal, ok := fieldVal.(float32); ok {
					msgVal.VibeFloat = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_int32"]; ok {
				if numVal, ok := fieldVal.(int32); ok {
					msgVal.VibeInt32 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_int64"]; ok {
				if numVal, ok := fieldVal.(int64); ok {
					msgVal.VibeInt64 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_uint32"]; ok {
				if numVal, ok := fieldVal.(uint32); ok {
					msgVal.VibeUint32 = &numVal
				}
			}
			if fieldVal, ok := objVal["vibe_uint64"]; ok {
				if numVal, ok := fieldVal.(uint64); ok {
					msgVal.VibeUint64 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_sint32"]; ok {
				if numVal, ok := fieldVal.(int32); ok {
					msgVal.VibeSint32 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_sint64"]; ok {
				if numVal, ok := fieldVal.(int64); ok {
					msgVal.VibeSint64 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_fixed32"]; ok {
				if numVal, ok := fieldVal.(uint32); ok {
					msgVal.VibeFixed32 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_fixed64"]; ok {
				if numVal, ok := fieldVal.(uint64); ok {
					msgVal.VibeFixed64 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_sfixed32"]; ok {
				if numVal, ok := fieldVal.(int32); ok {
					msgVal.VibeSfixed32 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_sfixed64"]; ok {
				if numVal, ok := fieldVal.(int64); ok {
					msgVal.VibeSfixed64 = numVal
				}
			}
			if fieldVal, ok := objVal["vibe_bool"]; ok {
				if boolVal, ok := fieldVal.(bool); ok {
					msgVal.VibeBool = boolVal
				}
			}
			if fieldVal, ok := objVal["vibe_bytes"]; ok {
				if bytesVal, ok := fieldVal.([]byte); ok {
					msgVal.VibeBytes = bytesVal
				}
			}
			protoReq.VibeScalar = msgVal
		}
	}
	// Call the client method
	resp, err := s.VibeServiceClient.SetVibeDetails(ctx, protoReq)
	if err != nil {
		// Return error as a CallToolResult with IsError=true
		return &mcp.CallToolResult{
			Content: []mcp.Content{
				&mcp.TextContent{
					Text: err.Error(),
				},
			},
			IsError: true,
		}, nil
	}
	// Create successful result
	// Convert response to JSON
	respContent := make(map[string]any)
	respContent["previous_vibe"] = resp.PreviousVibe
	respContent["vibe"] = resp.Vibe
	// Create and return the CallToolResult
	jsonContent, err := json.Marshal(respContent)
	if err != nil {
		return nil, err
	}
	return &mcp.CallToolResult{
		Content: []mcp.Content{
			&mcp.TextContent{
				Text: string(jsonContent),
				Type: "application/json",
			},
		},
		IsError: false,
	}, nil
}

func (s *vibeServiceMCPServer) SetVibeDetailsTool() mcp.Tool {
	tool := mcp.NewTool(
		"SetVibeDetails", mcp.WithDescription("Set vibe details"),
		mcp.WithString(
			"vibe",
			mcp.Required(),
			mcp.Description("The vibe of the string to be set"),
		),
		mcp.WithObject(
			"vibe_scalar",
			mcp.Required(),
			mcp.Description("The details of the vibe"),
			mcp.Properties(map[string]any{
				"vibe_double": map[string]any{
					"type":        "number",
					"description": "The details of the vibe double",
					"required":    true,
				},
				"vibe_float": map[string]any{
					"type":        "number",
					"description": "the details of the vibe float",
					"required":    true,
				},
				"vibe_int32": map[string]any{
					"type":        "number",
					"description": "The details of the vibe int32",
					"required":    true,
				},
				"vibe_int64": map[string]any{
					"type":        "number",
					"description": "The details of the vibe int64",
					"required":    true,
				},
				"vibe_uint32": map[string]any{
					"type":        "number",
					"description": "The details of the vibe uint32",
					"required":    false,
				},
				"vibe_uint64": map[string]any{
					"type":        "number",
					"description": "The details of the vibe uint64",
					"required":    true,
				},
				"vibe_sint32": map[string]any{
					"type":        "number",
					"description": "The details of the vibe sint32",
					"required":    true,
				},
				"vibe_sint64": map[string]any{
					"type":        "number",
					"description": "The details of the vibe sint64",
					"required":    true,
				},
				"vibe_fixed32": map[string]any{
					"type":        "number",
					"description": "The details of the vibe fixed32",
					"required":    true,
				},
				"vibe_fixed64": map[string]any{
					"type":        "number",
					"description": "The details of the vibe fixed64",
					"required":    true,
				},
				"vibe_sfixed32": map[string]any{
					"type":        "number",
					"description": "The details of the vibe sfixed32",
					"required":    true,
				},
				"vibe_sfixed64": map[string]any{
					"type":        "number",
					"description": "The details of the vibe sfixed64",
					"required":    true,
				},
				"vibe_bool": map[string]any{
					"type":        "boolean",
					"description": "The details of the vibe bool",
					"required":    true,
				},
				"vibe_bytes": map[string]any{
					"type":        "string",
					"description": "the details of the vibe bytes",
					"required":    true,
					"format":      "byte",
				},
			}),
		),
	)
	return tool
}

func (s *vibeServiceMCPServer) RegisterDefaultTools() {
	s.MCPServer.AddTool(s.SetVibeTool(), s.SetVibeHandler)
	s.MCPServer.AddTool(s.GetVibeTool(), s.GetVibeHandler)
	s.MCPServer.AddTool(s.SetVibeDetailsTool(), s.SetVibeDetailsHandler)
}
