// Code generated by protoc-gen-mcp. DO NOT EDIT.
package examplev1

import (
	"context"
	"encoding/json"

	"github.com/mark3labs/mcp-go/mcp"
	"github.com/mark3labs/mcp-go/server"
)

// GenerateSetVibeRequestResource creates an MCP resource for SetVibeRequest
func GenerateSetVibeRequestResource() mcp.Resource {
	return mcp.NewResource(
		"proto://SetVibeRequest",
		"SetVibeRequest",
		mcp.WithResourceDescription("Protocol buffer message for SetVibeRequest"),
		mcp.WithMIMEType("application/json"),
	)
}

// GenerateSetVibeResponseResource creates an MCP resource for SetVibeResponse
func GenerateSetVibeResponseResource() mcp.Resource {
	return mcp.NewResource(
		"proto://SetVibeResponse",
		"SetVibeResponse",
		mcp.WithResourceDescription("Protocol buffer message for SetVibeResponse"),
		mcp.WithMIMEType("application/json"),
	)
}

// GenerateGetVibeRequestResource creates an MCP resource for GetVibeRequest
func GenerateGetVibeRequestResource() mcp.Resource {
	return mcp.NewResource(
		"proto://GetVibeRequest",
		"GetVibeRequest",
		mcp.WithResourceDescription("Protocol buffer message for GetVibeRequest"),
		mcp.WithMIMEType("application/json"),
	)
}

// GenerateGetVibeResponseResource creates an MCP resource for GetVibeResponse
func GenerateGetVibeResponseResource() mcp.Resource {
	return mcp.NewResource(
		"proto://GetVibeResponse",
		"GetVibeResponse",
		mcp.WithResourceDescription("Protocol buffer message for GetVibeResponse"),
		mcp.WithMIMEType("application/json"),
	)
}

// GenerateVibeScalarResource creates an MCP resource for VibeScalar
func GenerateVibeScalarResource() mcp.Resource {
	return mcp.NewResource(
		"proto://VibeScalar",
		"VibeScalar",
		mcp.WithResourceDescription("Protocol buffer message for VibeScalar"),
		mcp.WithMIMEType("application/json"),
	)
}

// GenerateSetVibeDetailsRequestResource creates an MCP resource for SetVibeDetailsRequest
func GenerateSetVibeDetailsRequestResource() mcp.Resource {
	return mcp.NewResource(
		"proto://SetVibeDetailsRequest",
		"SetVibeDetailsRequest",
		mcp.WithResourceDescription("Protocol buffer message for SetVibeDetailsRequest"),
		mcp.WithMIMEType("application/json"),
	)
}

// RegisterVibeServiceMCPTools registers MCP tools for the VibeService
func RegisterVibeServiceMCPTools(s *server.MCPServer, client VibeServiceClient) {
	// Tool for SetVibe
	SetVibeTool := mcp.NewTool("setVibe",
		mcp.WithDescription("SetVibe from VibeService"),
		mcp.WithString("vibe",
			mcp.Description("Vibe parameter"),
			mcp.Required(),
		),
	)

	s.AddTool(SetVibeTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Create protobuf request
		pbReq := &SetVibeRequest{}

		if val, ok := request.Params.Arguments["vibe"].(string); ok {
			pbReq.Vibe = val
		} else {
			return mcp.NewToolResultError("Invalid vibe parameter type"), nil
		}
		// Call service method
		pbResp, err := client.SetVibe(ctx, pbReq)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Error calling SetVibe", err), nil
		}

		// Convert response to JSON
		respData, err := json.Marshal(pbResp)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Error marshaling response", err), nil
		}

		return mcp.NewToolResultText(string(respData)), nil
	})

	// Tool for GetVibe
	GetVibeTool := mcp.NewTool("getVibe",
		mcp.WithDescription("GetVibe from VibeService"),
	)

	s.AddTool(GetVibeTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Create protobuf request
		pbReq := &GetVibeRequest{}

		// Call service method
		pbResp, err := client.GetVibe(ctx, pbReq)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Error calling GetVibe", err), nil
		}

		// Convert response to JSON
		respData, err := json.Marshal(pbResp)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Error marshaling response", err), nil
		}

		return mcp.NewToolResultText(string(respData)), nil
	})

	// Tool for SetVibeDetails
	SetVibeDetailsTool := mcp.NewTool("setVibeDetails",
		mcp.WithDescription("SetVibeDetails from VibeService"),
		mcp.WithString("vibe",
			mcp.Description("Vibe parameter"),
			mcp.Required(),
		),
		mcp.WithObject("vibeScalar",
			mcp.Description("VibeScalar parameter"),
			mcp.Required(),
		),
	)

	s.AddTool(SetVibeDetailsTool, func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		// Create protobuf request
		pbReq := &SetVibeDetailsRequest{}

		if val, ok := request.Params.Arguments["vibe"].(string); ok {
			pbReq.Vibe = val
		} else {
			return mcp.NewToolResultError("Invalid vibe parameter type"), nil
		}
		// Complex type handling for VibeScalar
		if val, ok := request.Params.Arguments["vibeScalar"]; ok {
			// Convert JSON to protobuf message
			jsonData, err := json.Marshal(val)
			if err != nil {
				return mcp.NewToolResultErrorFromErr("Error marshaling vibeScalar", err), nil
			}
			if err := json.Unmarshal(jsonData, &pbReq.VibeScalar); err != nil {
				return mcp.NewToolResultErrorFromErr("Error unmarshaling to VibeScalar", err), nil
			}
		} else {
			return mcp.NewToolResultError("Missing vibeScalar parameter"), nil
		}
		// Call service method
		pbResp, err := client.SetVibeDetails(ctx, pbReq)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Error calling SetVibeDetails", err), nil
		}

		// Convert response to JSON
		respData, err := json.Marshal(pbResp)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Error marshaling response", err), nil
		}

		return mcp.NewToolResultText(string(respData)), nil
	})

}
